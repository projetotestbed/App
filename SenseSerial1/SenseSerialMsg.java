/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SenseSerialMsg'
 * message type.
 */

public class SenseSerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 137;

    /** Create a new SenseSerialMsg of size 8. */
    public SenseSerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SenseSerialMsg of the given data_length. */
    public SenseSerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SenseSerialMsg with the given data_length
     * and base offset.
     */
    public SenseSerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SenseSerialMsg using the given byte array
     * as backing store.
     */
    public SenseSerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SenseSerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SenseSerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SenseSerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SenseSerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SenseSerialMsg embedded in the given message
     * at the given base offset.
     */
    public SenseSerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SenseSerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public SenseSerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SenseSerialMsg> \n";
      try {
        s += "  [error=0x"+Long.toHexString(get_error())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=0x"+Long.toHexString(get_data())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [OriId=0x"+Long.toHexString(get_OriId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: error
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'error' is signed (false).
     */
    public static boolean isSigned_error() {
        return false;
    }

    /**
     * Return whether the field 'error' is an array (false).
     */
    public static boolean isArray_error() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'error'
     */
    public static int offset_error() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'error'
     */
    public static int offsetBits_error() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'error'
     */
    public int get_error() {
        return (int)getUIntBEElement(offsetBits_error(), 16);
    }

    /**
     * Set the value of the field 'error'
     */
    public void set_error(int value) {
        setUIntBEElement(offsetBits_error(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'error'
     */
    public static int size_error() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'error'
     */
    public static int sizeBits_error() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (false).
     */
    public static boolean isArray_data() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'data'
     */
    public int get_data() {
        return (int)getUIntBEElement(offsetBits_data(), 16);
    }

    /**
     * Set the value of the field 'data'
     */
    public void set_data(int value) {
        setUIntBEElement(offsetBits_data(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data'
     */
    public static int size_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data'
     */
    public static int sizeBits_data() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: OriId
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'OriId' is signed (false).
     */
    public static boolean isSigned_OriId() {
        return false;
    }

    /**
     * Return whether the field 'OriId' is an array (false).
     */
    public static boolean isArray_OriId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'OriId'
     */
    public static int offset_OriId() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'OriId'
     */
    public static int offsetBits_OriId() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'OriId'
     */
    public int get_OriId() {
        return (int)getUIntBEElement(offsetBits_OriId(), 16);
    }

    /**
     * Set the value of the field 'OriId'
     */
    public void set_OriId(int value) {
        setUIntBEElement(offsetBits_OriId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'OriId'
     */
    public static int size_OriId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'OriId'
     */
    public static int sizeBits_OriId() {
        return 16;
    }

}
